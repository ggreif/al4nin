data Scope :: *1 where
  Global :: Scope
  Nest :: Scope ~> Scope
 deriving Nat(s)

kind Kind = Acc | Prod

data Exp :: Kind ~> Scope ~> * where
  -- Accessors
  Here :: Exp Acc (1+s)s
  Surrounding :: Exp Acc s -> Exp Acc (1+s)s
  -- Producers
  Lam :: Exp k (1+s)s -> Exp Prod s
  App :: Exp k s -> Exp k s -> Exp Prod s
  Let :: Exp k s -> Exp k (1+s)s -> Exp Prod s
 deriving syntax(e) LeftPair(App) Item(Lam) Nat(Here, Surrounding)
