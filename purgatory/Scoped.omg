import "LangPrelude.prg"

data Scope :: *1 where
  Global :: Scope
  Nest :: Scope ~> Scope
 deriving Nat(s)

kind Kind = Acc | Prod

data Exp :: Kind ~> Scope ~> * where
  -- Accessors
  Here :: Exp Acc (1+s)s
  Surrounding :: Exp Acc s -> Exp Acc (1+s)s
  -- Producers
  Lam :: Exp k (1+s)s -> Exp Prod s
  App :: Exp k s -> Exp k' s -> Exp Prod s
  In :: Exp Prod 0s -- junk, never terminates a Let!
  Let :: Label name -> Exp k s -> Exp k' (1+s)s -> Exp Prod s
 deriving syntax(e) Record(In, Let) LeftPair(App) Item(Lam) Nat(Here, Surrounding)

-- raise scope
--
unnest :: Exp k (1+s)s -> Maybe (Exp k s)
unnest (1+v)e = Just v
unnest In = unreachable
unnest (f,a)e = do { f' <- unnest f; a' <- unnest a; return (f',a')e } where monad maybeM
unnest (e)e = do { e' <- unnest e; return (e')e } where monad maybeM
unnest {n=e;r}e = do { e' <- unnest e; r' <- unnest r; return {n=e';r'}e } where monad maybeM
unnest _ = Nothing

unnest' :: Exp k' (1+s)s -> Maybe (exists k . Exp k s) 
unnest' a = do { a' <- unnest a; return (Ex a') } where monad maybeM

unnest'' :: Exp k'' s -> Exp k' (1+s)s -> Maybe (exists k . Exp k s) 
unnest'' _ (1+v)e = yep v 
unnest'' _  In = unreachable
unnest'' d (f,a)e = do { Ex f' <- unnest'' d f; Ex a' <- unnest'' d a; return (Ex (f',a')e) } where monad maybeM 
{-
unnest (e)e = do { e' <- unnest e; return (e')e } where monad maybeM 
unnest {n=e;r}e = do { e' <- unnest e; r' <- unnest r; return {n=e';r'}e } where monad maybeM 
-}
unnest'' a 0e = yep a
unnest'' _ _ = Nothing

-- occurs test
--
occurs :: Exp Acc (1+s)s -> Exp Prod (1+s)s -> Bool
occurs v (f,a)e = if occurs' v f then True else occurs' v a
occurs v (e)e = occurs' (1+v)e e
occurs v {_=outer; inner}e = let deeper = (1+v)e in if occurs' v outer then True else occurs' deeper inner

occurs' :: Exp Acc (1+s)s -> Exp k (1+s)s -> Bool
occurs' v (v'@(1+_)e) = comp v v'
  where comp :: Exp Acc s -> Exp Acc s -> Bool
        comp 0e 0e = True
        comp (1+v)e (1+v')e = comp v v'
        comp _ _ = False
occurs' 0e 0e = True
occurs' _ 0e = False
occurs' v (lam@(_)e) = occurs v lam
occurs' v (app@(_,_)e) = occurs v app
occurs' v (lt@{_=_;_}e) = occurs v lt

-- eta conversion
--
eta :: Exp k' s -> Maybe (exists k . Exp k s)
eta ((f, 0e)e)e = do { f' <- unnest f; return (Ex f') } where monad maybeM
eta _ = Nothing

-- evaluation
--
evalStep :: Exp k' s -> Maybe (exists k . Exp k s)
evalStep (f@(e)e) = case eta f of
                    f'@(Just _) -> f'
                    _ -> do
                         Ex e' <- evalStep e
                         return (Ex (e')e)
                           where monad maybeM
evalStep (f, e)e = case evalStep f of
                   Just (Ex f') -> yep (f', e)e
                   _ -> case (evalStep e, f) of
                        (Just (Ex e'), _) -> yep (f, e')e
                        (_, (0e)e) -> yep e
                        (_, ((1+v)e)e) -> yep v -- kill e
                        (_, (e')e) -> if occurs' 0e e' then yep {`subst=e; e'}e else unnest' e'
                        (_, _) -> Nothing -- stuck
evalStep {n=e; e'}e = case evalStep e of
                      Just (Ex o) -> yep {n=o; e'}e
                      _ -> case (evalStep e', e') of
                           (Just (Ex i), _) -> yep {n=e; i}e
                           (_, 0e) -> yep e
                           (_, (1+v)e) -> yep v -- discard
                           (_, _) -> if occurs' 0e e' then unnest'' e e' else unnest' e'
evalStep _ = Nothing

yep :: Exp k' s -> Maybe (exists k . Exp k s)
yep a = do { return (Ex a) } where monad maybeM
-- yep a = Just (Ex a) -- #issue98!

-- some examples
etaCandidate = ((2e,0e)e)e
appRedex = ((0e)e, 0e)e
killRedex = ((5e)e, 0e)e
unoccurRedex = (({`g=1e;5e}e)e, 0e)e
