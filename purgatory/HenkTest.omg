import "LangPrelude.prg"


prop LE :: Nat ~> Nat ~> *0 where
  Base:: LE Z a
  Step:: LE a b -> LE (S a) (S b)

data LE':: Nat ~> Nat ~> *0 where
  LE:: LE x y => LE' x y  

plus :: Nat ~> Nat ~> Nat
{plus Z x} = x
{plus (S y) x} = S {plus y x}


data Climber :: *1 where
  Spine :: Nat ~> Climber
  Binder :: Nat ~> Nat ~> Climber


{- climbing rules
.
.
^       up
^       up
*       Spine' (start)
|\      LV
| \     SE
|  \    SE
|   \   SE
|    \  SE
|     + SE (target)
|
+-------------

-}

prop Climber' :: Climber ~> *0 where
  -- The spine starts one above ground
  Spine' :: Nat' (S st) -> Climber' (Spine (S st))
  -- We can leave the spine
  LV :: Climber' (Spine (S st)) -> Climber' (Binder 1t st)
  -- We can go southeast, even hitting the ground
  SE :: Climber' (Binder (S b) (S st)) -> Climber' (Binder (S (S b)) st)


diff :: Nat ~> Nat ~> Nat
{diff a Z} = a
{diff (S a) (S b)} = {diff a b}

-- determine the binding discipline
discipline :: Nat ~> Climber ~> Climber
--{discipline a (Spine b)} = Binder (S {diff a b}) b
--{discipline a (Binder (S Z) Z)} = Binder (S a) Z
{discipline a b} = Binder (S {diff a {strat b}}) {strat b}

-- strat: get the stratum
strat :: Climber ~> Nat
{strat (Spine b)} = b
{strat (Binder a b)} = b

data Henk :: Climber ~> * where
  Lit :: Climber' (Spine st) -> Henk (Spine st)
  Bind :: LE {strat b} a => Climber' {discipline a b} -> Henk (Spine a) -> Henk b -> Henk {discipline a b}
  Value :: Henk (Binder 1t 0t)

five :: Henk (Binder 1t 0t)
five = Value

int :: Henk (Spine 1t)
int = Lit (Spine' 1v)

constfive :: Henk (Binder 2t 0t)
constfive = Bind (SE $ LV $ Spine' 2v) int five

tau_constfive = Bind (LV $ Spine' 2v) int int

climb :: Climber ~> Climber
{climb (Spine n)} = Spine (S n)
{climb (Binder (S Z) st)} = Spine (S st)
{climb (Binder (S (S b)) st)} = Binder (S b) (S st)

up :: Climber' (Spine st) -> Climber' (Spine (S st))
up (Spine' n) = Spine' (S n)


--climbNonPI :: Climber' e -> Climber' {climb e} -> Equal {discipline 1t {climb e}} {climb {discipline 1t e}}
--climbNonPI (Spine' m) (Spine' n) = Eq

restoreLV :: Climber' (Binder 1t {strat b})
	  -> Climber' {discipline a b}
	  -> Equal (Binder 1t {strat b}) {discipline a b}
	  -> Equal (Spine (S {strat b})) {climb {discipline a b}}
restoreLV (a@LV (Spine' _)) (b@LV (Spine' _)) Eq = check Eq


tau :: Henk c -> Henk {climb c}
tau (Lit cl) = Lit (up cl)
tau Value = Lit (Spine' 1v)
--DONE--tau (Bind (LV cl) (a@Lit (Spine' 1v)) (b@Lit (Spine' 1v))) = Lit cl



--tau (Bind (LV cl) (a@Lit _) _) = check(Lit cl)
tau (Bind (LV cl) (a@Lit _) _) = Lit cl
    where theorem hyp = restoreLV (LV cl) (LV cl) Eq


--Equal {discipline (Spine 1t) {climb (Binder 1t 0t)}} (Spine 1t)
-- = Equal {discipline (Spine 1t) (Spine 1t)} (Spine 1t)
--TODO-tau (Bind (SE cl) (a@Lit qf) b) = check (Bind cl a (tau b))

--TODO----tau (Bind (SE (LV cl)) (a@Lit qf) b) = check (Bind (LV cl) a (tau b))

--tau (Bind (a@Lit _) (Lit b)) = Bind a (Lit (UP b))
--- tau (Bind Type Type) = Star
--needs lemma: 
--tau (Bind Type b) = Bind Type (tau b)
{- zu zeigen:
Henk {discipline (Spine 1t) a} -> Henk {climb {discipline (Spine 1t) a}}

Idee:
Equal {climb {discipline (Spine 1t) a}} {discipline (Spine 1t) {climb a}}
-}

diffRule :: Nat' b -> Equal {diff 1t b} (S {diff 0t b})
diffRule Z = Eq
--diffRule (S n) = Eq
--    where theorem hyp = diffRule n

pushClimbIn :: Climber' a -> Equal {climb {discipline (Spine 1t) a}} {discipline (Spine 1t) {climb a}}
--pushClimbIn (Spine' b) = check Eq

-- need lemma: tau (Bind a b) = Bind a (tau b)

