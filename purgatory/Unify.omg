{-
 * Copyright (c) 2010 Gabor Greif
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
 * OR OTHER DEALINGS IN THE SOFTWARE.
 -}

import "LangPrelude.prg"


-- Define the unifier record
data Flow :: *1 where
  None :: Flow
  Real :: Flow

data Info :: Flow ~> * where
  Nada :: Info None
  Spec :: Info Real

data Vars :: Flow ~> * where
  Single :: Label a -> Vars Real
  Equate :: Label a -> Label b -> Vars None


data Unifier :: Row * Tag ~> * where
  Empty :: Unifier {}r
  Pair :: Info a -> Vars a -> Unifier r -> Unifier {Int=`huhu; r}r 
 deriving Record(u)


{-
ideally:
- Info should track the shape of the specialization in the type index
- Vars should track the Tags in the type index
- the Vars should be unique in the Unifier

The specialization should be an applicative thrist. (Thrist Spec t Peg)
-}


testIO = do
				 handleIO (return "normal") worker
    where monad ioM
          worker xs = do
            putStr ("HEHE " ++ xs)
            return "inside"


kind TypConstr = Regular | Univ Tag

kind T = TInt | TArr T T | TList T

data Typ :: TypConstr ~> T ~> *0 where
  Int :: Typ Regular TInt
  Var :: Label name -> Typ (Univ name) any
  Arr :: Typ a contra -> Typ b co -> Typ Regular (TArr contra co)
  List :: Typ a t -> Typ Regular (TList t)


data Discharge :: Row Tag Nat ~> Row Tag Nat ~> *0 where
  Triv :: Typ Regular a -> Typ Regular a -> Discharge dict dict
  Deep :: Typ Regular a -> Typ Regular b -> Discharge dict dict
  Alias :: Typ (Univ l) a -> Typ (Univ r) a -> Discharge dict {l=1t, r=1t; dict}r
  Subst :: Typ (Univ l) a -> Typ Regular a -> Discharge dict {l=1t; dict}r


data Thrist :: forall (l :: *1) . (l ~> l ~> *)  ~> l ~> l ~> * where
  Nil :: Thrist k a a
  Cons :: k a b -> Thrist k b c -> Thrist k a c
 deriving List(t)

aV = Var `a
idT = Arr aV aV

bV = Var `b
cV = Var `c
{- no workee :-(
mapT = Arr (Arr bV cV) (Arr (List bV) (List cV))
(Arr mapT1 mapT2) = mapT
(Arr mapT21 mapT22) = mapT2
-}
mapT1 = Arr bV cV
mapT21 = List bV
mapT22 = List cV
mapT2 = Arr mapT21 mapT22
mapT = Arr mapT1 mapT2


intL = List Int

resultV = Var `result

-- gathering constraints for
--   result = map id [1, 2, 4]

{-

1) map id ---> (Arr bV cV) =!= idT == Arr aV aV
2) (map id) [1, 2, 4] ---> List cV =!= List Int
3) result ---> resultV =!= List cV

-}

c1 = Deep mapT1 idT
c2 = Deep mapT21 intL
c3 = Subst resultV mapT22

t1 = [c1, c2, c3]t


mergeTags :: Tag ~> Tag ~> Tag
{mergeTags a a} = a

tryMergeLabels :: Label a -> Label b -> (Label a + Label {mergeTags a b})
tryMergeLabels a b = case sameLabel a b of
                     L eq -> L a
                     R neq -> R undefined

