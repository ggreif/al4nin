{-
 * Copyright (c) 2007 Gabor Greif
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
 * OR OTHER DEALINGS IN THE SOFTWARE.
 -}


import "LangPrelude.prg" 
  (head,tail,lookup,member,fst,snd,map,Monad,maybeM,id,ioM,Row,HasType,RCons,RNil,Eq,Equal)


kind Type :: *1 where
 LVoid :: Type
 LInt :: Nat ~> Type
 LFloat :: Type
 LDouble :: Type
 LPointer :: Type ~> Type
 LFunction :: Type ~> Type ~> Type
 LVector :: Nat ~> Type ~> Type

i1 :: Type
--{i1} = LInt *1

kind BB = Entry | Normal

data Instr :: Type ~> BB ~> * where
  Unwind :: Instr t n
  Branch :: BasicBlock t Normal -> Instr t n
  Return :: Instr LVoid n
  Switch :: Value a -> BasicBlock t Normal -> [(Value a, BasicBlock t Normal)] -> Instr t n

data BasicBlock :: Type ~> BB ~> * where
  Phi :: [(Value a, BasicBlock t n)] -> BasicBlock t Normal
  NoPhi :: Instr t n -> BasicBlock t n


data Value :: Type ~> * where
  LitI :: Int -> Value (LInt #32)
  LitB :: Bool -> Value (LInt #1)
  Ref :: String -> Value t
  Undef :: Value t

data Function :: Type ~> * where
  Function :: Value a -> BasicBlock b Entry -> Function (LFunction a b)


-- ###### TESTS #####

t1 = Phi [(lTrue, Phi [(Ref "uff", NoPhi (Branch (NoPhi Unwind)))])]
t2 = NoPhi (Branch (NoPhi Return))
t3 = NoPhi (Branch t2)
t4 = NoPhi (Switch (Ref "ggg") t2 [(LitB True, t3)])

lTrue = LitB True

##test "Phi not allowed in entry node"
  f1 = Function (LitB True) t1

f2 = Function (LitB False) t2
f3 = Function (LitI 42) t3
f4 = Function (LitI 42) t4
