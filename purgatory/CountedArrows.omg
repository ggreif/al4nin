--import "LangPrelude.prg" (id)
id x = x

recount :: Nat ~> Nat ~> * ~> Nat
{recount m 0t a} = m
{recount m (1+n)t (a -> b)} = {recount m n b}

data CountedArrow :: Nat ~> * ~> * where
  Int :: Int -> CountedArrow 0t Int
  Pure :: Nat' (1+n)t -> (a -> b) -> CountedArrow {recount (1+n)t n b} (a -> b)
  Var :: Label l -> CountedArrow n b
  App :: CountedArrow (1+n)t (a -> b) -> CountedArrow m b -> CountedArrow n b
  Lam :: Label l -> CountedArrow n b -> CountedArrow (1+n)t (a -> b)
  Let :: Label l -> CountedArrow n' a -> CountedArrow n'' b -> CountedArrow n c
 deriving syntax(c) Applicative(Var, App, Lam, Let)


data HideCount :: * ~> *1 where
  Arr :: forall (a :: *) (b :: *) . Nat ~> a ~> b ~> HideCount (a -> b)

--data Arrow :: HideCount t ~> * where
--  In :: CountedArrow n (a -> b) -> Arrow (Arr n a b)

-- Colored types
kind SurfaceColor = Yellow | Green | Blue | Red

-- Type regime
data Type :: *1 where
  Clr :: SurfaceColor ~> SurfaceColor ~> Type
  Ar :: Type ~> Type ~> Type

-- colored Nat and Bool types
type N' = Clr Yellow Green
type B' = Clr Blue Red

-- polarity
kind Polarity = Pos | Neg

rev :: Type ~> Type
{rev (Clr a b)} = Clr b a

toType :: Polarity ~> * ~> Type
{toType Pos Int} = N'
{toType Neg Int} = {rev N'}
{toType Pos Bool} = B'
{toType Neg Bool} = {rev B'}

fromType :: Type ~> *
{fromType N'} = Int
{fromType (Clr Green Yellow)} = Int
{fromType B'} = Bool
{fromType (Clr Red Blue)} = Bool


-- TODO: - find out why prompt> ":k Arr 1t Int" fails
--       - introduce polarity, detect existentials
--       - introduce Check::Rep a->CA   and infer()
