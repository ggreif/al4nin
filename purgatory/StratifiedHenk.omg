-- -*-Haskell-*-

{-
 * Copyright (c) 2006 Gabor Greif
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
 * OR OTHER DEALINGS IN THE SOFTWARE.
 -}

-- Usage:
--
--  Set up the environment
--     setenv LD_LIBRARY_PATH /opt/exp/gnu/lib:$LD_LIBRARY_PATH
--     setenv PATH /home/ggreif/%NoBackup%/Omega1.2:$PATH
--
--  Start the omega interpreter by typing
--     omega StatifiedHenk.omg
--  and run your commands on the prompt
--

import "/home/ggreif/%NoBackup%/Omega1.2/LangPrelude.prg" 
  (head,tail,lookup,member,fst,snd,map,Monad,maybeM,id,ioM,Row,HasType,RCons,RNil)

Henk :: Nat ~> Nat ~> *
data Henk stratum binding
 = Star where stratum = #2, binding = Z
 | Rectangle where stratum = #3, binding = Z
 | Lozenge where stratum = #3, binding = Z
 | Var String where binding = Z
 | exists s b . App (Henk stratum b) (Henk s binding) where Applicable stratum b s, binding = Z
 | Lam (Henk stratum Z) (Henk (S stratum) Z) (Henk stratum Z) where binding = #2
 | exists s . Pi (Henk s Z) (Henk (S s) Z) (Henk (S s) Z) where stratum = (S s), binding = #1

prop Applicable stratum binder stratum'
 = PiAppl where binder = #1, stratum = S stratum'
 | LamAppl where binder = #2, stratum = stratum'


type Value = Henk #0 #0
type ValueLam = Henk #0 #2
type Type = Henk #1 #0
type TypeLam = Henk #1 #2
type Kind = Henk #2 #0
type KindPi = Henk #2 #1
type KindLam = Henk #2 #2

exp0 :: Value
exp0 = Var "b:Bool"

exp1 :: TypeLam
exp1 = Lam (Var "s") Star (Var "s")  -- lam s:*0 . s
exp1' :: Kind
exp1' = App exp2' Star

exp2 :: KindPi
exp2 = Pi (Var "_") Star Star        -- *0 ~> *0
exp2' :: KindLam
exp2' = Lam (Var "_") Rectangle Star -- LAM _:*1 . *0

-- todo:
--  - Item notation
--  - reduction rules
--  - type inference of lambda terms
--  - ANF conversion

-- type inference of lambda terms
down :: Nat ~> Nat
{down Z} = Z
{down (S b)} = b

tau :: Henk n b -> Henk (S n) {down b}
tau Star = Rectangle
--tau Rectangle = Lozenge
tau (Lam v domain result) = Pi (Var "_") domain (tau result)
tau (App (Lam _ _ expansion) _) = tau expansion
tau (App (Pi _ _ expansion) _) = tau expansion
