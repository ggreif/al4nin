{-
 * Copyright (c) 2010 Gabor Greif
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
 * OR OTHER DEALINGS IN THE SOFTWARE.
 -}

-- Implement the PTS-like plane
-- of PIs and lambdas (\ and /\), etc.
-- Please refer to
--  http://www.cedar-forest.org/forest/papers/journals-publications/jfp6-2.ps
-- (esp. p. 4, item 4: "Higher degrees").
-- Original paper from de Bruijn (with pretty tree lambda notation and
--                                argument-before-function order) is
--  http://alexandria.tue.nl/repository/freearticles/597608.pdf
--
-- There are still many limitations, but I think
-- the major obstacles are solved.

-- Global TODO list:
--  * named (and/or numbered, i.e. de Bruijn) variables
--  * variable capture, tracking free vars
--  * outer context (LeftList?)
--  * unification of contexts, unifiers
--  * sized types (speculative)
--  * subtyping of singleton types (needed in unification?)
--  * applying sigma types??? -- yes, appears to be the second projection
--  * polynomial datatypes (+ subtyping)
--  * beta reduction (normalization) in small- and big-step (horizontals)
--  * verticals (unreduced and normalized variants)

import "LangPrelude.prg"

-- walks in the lambda plane

data Payload :: *1 where
  None :: Payload
  Charge :: Nat ~> Payload ~> Payload
 deriving List(p)

--                  v-- dimensionality
--           v-- stratum
data Walk :: Nat ~> Nat ~> Payload ~> *1 where
  Origin :: Walk 0t 0t None
  North :: Walk n 0t None ~> Walk (1+n)t 0t None
  Pair :: Walks k ~> Walk n m None ~> Walk n m [k;p]p
  SE :: Walk (1+n)t m [k;p]p ~> Walk n (1+m)t [k;p]p
 deriving syntax(w) Nat(Origin, North) Tick(SE) Pair(Pair)

-- list of walks ending in the same stratum
data Walks :: Nat ~> *1 where
  Heart :: Walks n
  Wrap :: Walk n m p ~> Walks n ~> Walks n
 deriving syntax(ws) List(Heart, Wrap)

-- Quantifiers are
--   * 0-dimensional: 42, Int, *, ...
--   * 1-dimensional: PI a:Int.Int
--   * 2-dimensional: \, dependent product: {a:A, b:B(a)}
--   * etc.
--
-- they are parametrized by walks
data Quant :: Walk n m p ~> Walk (1+n)t m' p' ~> *  where
  Star :: Quant 2w 3w
  Up :: Quant (2+n)w (3+n)w -> Quant (3+n)w (4+n)w
  Type :: Quant 1w 2w
  Term :: Quant 0w 1w
  Ext :: Context Anchored [w; ws]ws -> Quant r s -> Quant ([w; ws]ws, r)w s
  Lam :: Quant p {up p} -> Quant (p`1)w {up (p`1)w}
  Sig :: Quant p {up p} -> Quant (p`1)w {up (p`1)w}
  Singleton :: Quant p {up p} -> Quant {up p} {up {up p}}
 deriving syntax(q) Nat(Star, Up) Tick(Lam) Pair(Ext)

-- tau': calculate a quantifier's classifier
up :: Walk n m p ~> Walk (1+n)t m' p'
{up (c, h)w} = {up h}
{up ((c, h)w`1)w} = h
{up (p`2)w} = (p`1)w
{up (1+n)w} = (2+n)w
{up 0w} = 1w

tau' :: Quant a ta -> Quant ta {up ta}
tau' (c, h)q = tau' h
tau' ((c, h)q`1)q = h
tau' (p`2)q = (p`1)q
tau' (Sig (_, h)q) = h
tau' (Sig (s@(Sig _))) = s
tau' (1+n)q = (2+n)q
tau' 0q = 1q
tau' Type = Star
tau' Term = Type
tau' (Singleton s) = tau' (tau' s)

-- extract payload from lambda
charge :: Walk n m [k;p]p ~> Walks k
{charge (c, t)w} = c
{charge (p`1)w} = {charge p}

uncharge :: Quant p q -> Context Anchored {charge p}
uncharge (c, _)q = c
uncharge (p`1)q = uncharge p

-- calculate heart
heart :: Walks n ~> Walk n 0t None
{heart [h]ws} = h
{heart [a, b; r]ws} = {heart [b; r]ws}

-- contexts accumulate quantifiers (possibly around a heart)

kind Fixture = Floating | Anchored

data Context :: Fixture ~> Walks n ~> * where
  Empty :: Context Floating []ws
  Heart :: Quant n (1+n)w -> Context Anchored [n]ws
  Quantify :: Quant (v`1)w {up (v`1)w} -> Context f ws -> Context f [(v`1)w; ws]ws
  Appl :: Equal {charge f} {upc ws}
          => Context Anchored ws
          -> Context Anchored [f, h; r]ws
          -> Context Anchored [h; r]ws
 deriving syntax(c) List(Empty, Quantify) Item(Heart) Pair(Appl)

-- tau: classify context
upc :: Walks n ~> Walks (1+n)t
{upc []ws} = []ws
{upc [0w; ws]ws} = [1w; {upc ws}]ws
{upc [(1+n)w; ws]ws} = [(2+n)w; {upc ws}]ws
{upc [((c, h)w`1)w; ws]ws} = {upc ws}
{upc [(w`2)w; ws]ws} = [(w`1)w; {upc ws}]ws

-- for a quantifier on the spine, up is 1+
spineLemma :: Quant n (1+n)w -> Equal (1+n)w {up n}
spineLemma Term = Eq
spineLemma Type = Eq
spineLemma 0q = Eq
spineLemma (1+n)q = Eq

-- we want to show: Equal {upc [_c]ws} [(1+_c)w]ws
spineContext :: Context Anchored [c]ws -> Equal {upc [c]ws} [(1+c)w]ws
spineContext (Term)c = Eq
spineContext (Type)c = Eq
spineContext (0q)c = Eq
spineContext ((1+n)q)c = Eq

tau :: Context f ws -> Context f {upc ws}
tau Empty = Empty
tau (c@(q)c) = (tau' q)c
  where theorem becauseOf = spineContext c
tau [((_,t)q`1)q; c]c = tau c
tau [(t`2)q; c]c = [(t`1)q; (tau c)]c
tau [Sig (_,_)q; c]c = tau c
tau [Sig (s@(Sig _)); c]c = [s; (tau c)]c
tau (_, [_; c]c)c = tau c
tau (q, app)c = tau (q, cancel app)c
  where cancel :: Context Anchored [w; ws]ws -> Context Anchored [w; ws]ws
        cancel (_, [_; c]c)c = c
        cancel (q, app)c = cancel (q, cancel app)c

-- runtime values are represented by expressions

-- TODO!

-- values, they are used for building verbose contexts
-- CAVEAT: this is pretty outdated, see Evidence.omg
--

data Value :: * where
  Ref :: Label n -> Value
  Sole :: Value
  App :: Value -> Value -> Value
  Typed :: Value -> Value -> Value
 deriving syntax(va) LeftList(Sole, App) Pair(Typed)

data Raw :: * ~> * where
  Def :: Value -> Raw Value
  Annotated :: Value -> Value -> Raw (Value, Value)
 deriving syntax(ra) Pair(Annotated)

data LevelsInferred :: Nat ~> * where
  At :: Nat' l -> LevelsInferred l

-- representation of contexts with names
data VerboseContext :: Row Tag (h ~> *) ~> * where
  E :: VerboseContext {}r
  Q :: Label n -> k a -> VerboseContext r -> VerboseContext {n=k;r}r
 deriving syntax(ve) Record(E, Q)

-- Examples of VerboseContext


-- h :: (Foo :: * ~> *) Int
h_is_Int = { `Int=(Ref `Type, Ref `Star)ra
           , `h=([]va, [(Ref `Foo, [Ref `Karr, Ref `Star, Ref `Star]va)va, Ref `Int]va)ra
           }ve

-- Tests

-- we allow Term categorizer (pi x:42.25) in contexts
kt0 = [((Heart Term, Type)q`1)q; Heart Term]c
tkt0 = tau kt0

##test "exclude Term categorizer's (pi x:42.25) application"
 kt0' = (undefined, kt0)c

-- regular lambda2 : \x:Int.42
lambda2Int = ((Heart Type, Star)q`2)q
kt1 = (Heart Term, [lambda2Int; Heart Term]c)c
tkt1 = tau kt1

-- regular PI1 : pi (x:Int).Int
pi1Int = ((Heart Type, Star)q`1)q
kt2 = (Heart Term, [pi1Int; Heart Type]c)c
tkt2 = tau kt2

-- type-level lambda2 : /\x:*:Int
lambda2star = ((Heart 0q, 1q)q`2)q
kt3 = (Heart Type, [lambda2star; Heart Type]c)c
tkt3 = tau kt3

-- mixed form: \f:Int->Int.f 42
lambda2Int_Int = (([pi1Int; Heart Type]c, 0q)q`2)q
kt4 = ([lambda2Int; Heart Term]c, [lambda2Int_Int; Heart Term]c)c
--tkt4 = tau kt4

-- 2 args: \f i.f i
kt5 = (Heart Term, ([lambda2Int; Heart Term]c, [lambda2Int_Int, lambda2Int; Heart Term]c)c)c
--tkt5 = tau kt5

-- type constructor: M :: * ~> *
emq = ((Heart Star, 1q)q`2)q    -- * ~>
kt6 = (Heart Type, [emq; Heart Type]c)c  -- e.g. M Int
tkt6 = tau kt6


-- \f : Int . return 42   (f :: Int -> M Int)
ef = [((Heart Type, 0q)q`2)q; Heart Term {-By kt6-}]c  -- Int -> M Int
kt7 = (Heart Term, ef)c  -- f 42
tkt7 = tau kt7

-- (Int, Int), the type of the cartesian product of terms
kt8 = Sig ((Type)c, Star)q  -- e.g. SIGMA a::Int .
tkt8 = [kt8; (Type)c]c  -- e.g. SIGMA a::Int . Int

-- <42,25>, a cartesian pair of terms
kt9 = Sig kt8  -- e.g. (a::Int) *
kt9' = Sig $ Sig ((Singleton Term)c, Star)q  -- e.g. (a::S(19)) *
tkt9 = [kt9; (Term)c]c  -- e.g. (a::Int) * b
tkt9' = [kt9'; (Term)c]c  -- e.g. (a::S(19)) * b  === <19, b>

-- \h (g :: Int->Int->Int) -> Int
gi = [lambda2Int, lambda2Int; Heart Term]c
ha = ((tau gi, Star)q`2)q
hagi = (gi, [ha; Heart Term]c)c
