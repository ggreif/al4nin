import "LangPrelude.prg"

-- Thrist definition

data Thrist :: forall (l :: *1) . (l ~> l ~> *)  ~> l ~> l ~> * where
  Nil :: Thrist k a a
  Cons :: k a b -> Thrist k b c -> Thrist k a c
 deriving List(l)

data LeftThrist :: forall (l :: *1) . (l ~> l ~> *)  ~> l ~> l ~> * where
  LeftNil :: LeftThrist k a a
  LeftCons :: LeftThrist k a b -> k b c -> LeftThrist k a c
 deriving LeftList(lt)

-- Peg is a void type 

data Peg :: * where {}

-- Applicative functors

data Applicative :: (* ~> * ~> *) ~> * ~> * ~> * where
  Fun :: f a b -> Applicative f (f a b) Peg
  Arg :: a -> Applicative f b (f a b)
  Par :: Thrist (Applicative f) b Peg  -> Applicative f b (f a b)

data LeftApplicative :: (* ~> * ~> *) ~> * ~> * ~> * where
  Nuf :: f a b -> LeftApplicative f Peg (f a b)
  Gra :: a -> LeftApplicative f (f a b) b
  Rap :: LeftThrist (LeftApplicative f) Peg b -> LeftApplicative f (f a b) b
 deriving syntax(a) Item(Gra)

t0 = Par [Arg 2, Arg 40, Fun (+)]l -- App (App (Fun (+)) (Val 40)) (Val 2)
t0' = Rap [Nuf (+), (40)a, (2)a]lt


t1 = Par ([Fun chr]l)

data Arith :: * ~> * ~> * where
  Plus :: Arith Int (Arith Int Int)
  Minus :: Arith Int (Arith Int Int)
  Times :: Arith Int (Arith Int Int)
  Div :: Arith Int (Arith Int Int)
  Mod :: Arith Int (Arith Int Int)

t2 = Par [Arg 2, Arg 40, Fun Plus]l -- App (App (Fun Plus) (Val 40)) (Val 2)

data AppliCode :: * ~> * ~> * where
  Cf :: Code (a -> b) -> AppliCode Peg (a -> b)
  Ca :: Code a -> AppliCode (a -> b) b
  Cpar :: LeftThrist AppliCode Peg b -> AppliCode (a -> b) b
 deriving syntax(ca) Item(Ca)


t3 = Cpar [Cf [|ord|], ([|'g'|])ca]lt

{-
concType :: * ~> *
{concType (Arith a b)} = {concType a} -> {concType b}
{concType Int} = Int

concretize :: Applicative Arith a -> Applicative (->) {concType a}
concretize (Fun Plus) = Fun (+)
--concretize (Val a) = Val a -- need representation types here
concretize (App f a) = App (concretize f) (concretize a)

-- okay now let's see if we can fold things

--foldArith comb seed = App (Fun comb) `foldr` Val seed
attempt1 = (\a b -> App (App (Fun Plus) (Val a)) b) `foldr` (Val 0)
-}

{-
I want something like

[map, [plus, 1]l, [from, 1, 5]l ]l

current syntax is

[Par [Arg 5, Arg 1, Fun from]l, Par [Arg 1, Fun plus]l, Fun map]l

i.e. reversed and visibly Tagged.

-}

