-- Discriminated sums as injections

-- TODO:
--  * make 'constr' total by tracking the tags of injections in 'Sum' as a type index
--  * implement recursive/parameterized sums
--  * catas, anas etc. (E. Meijer et al.)

injtype :: Tag ~> TypeList ~> * ~> *
{injtype `Le []tl Test} = Int -> Test
{injtype `Mi []tl Test} = [Char] -> Test
{injtype `Ri []tl Test} = Bool -> Test -> Test
{injtype `Ni [b]tl (List b)} = List b
{injtype `Co [b]tl (List b)} = b -> List b -> List b
{injtype `Eq [a]tl (Equal' a a)} = Equal' a a
{injtype `Hide []tl Exo} = {- exists a . -} a -> Exo

data Exo = exists a . Hide a

sumtype :: TypeList ~> Tag ~> *
{sumtype []tl `Test} = Test
{sumtype [a]tl `List} = List a
{sumtype [a,b]tl `Equal} = Equal' a b
{sumtype []tl `Exo} = Exo

data TypeList :: *1 where
  FNil :: TypeList
  FCons :: * ~> TypeList ~> TypeList
 deriving List(tl)

data Free :: TypeList ~> TypeList ~> * where
  Zero :: Free []tl []tl
  More :: Free l l -> Free [a; l]tl [a; l]tl
  Tag :: Label t -> Free l r -> Free [{sumtype l t}]tl r
  Equate :: Equal a b => Free m [a, b; l]tl -> Free m [a; l]tl
  Ctor :: Free [l]tl r -> Injections r l -> Label c -> Free [l]tl [{injtype c r l}]tl
 deriving syntax(f) Nat(Zero, More) Pair(Tag)

data Injections :: TypeList ~> * ~> * where
  None :: Injections tl f
  Inj :: Label cn -> {injtype cn tl f} -> Injections tl f -> Injections tl f
 deriving Record(is)


constr :: Free [l]tl [r]tl -> r
constr (Ctor p {c'=inj; cs}is c) = case sameLabel c c' of
                                   L Eq -> inj
                                   _ -> constr (Ctor p cs c)

data Test :: * where
  Le :: Int -> Test
  Mi :: [Char] -> Test
  Ri :: Bool -> Test -> Test
 deriving syntax(test) Item(Mi)

i0 = {`Le=Le,`Mi=Mi,`Ri=Ri}is
f0 = Ctor (`Test, 0f)f i0
t1 = constr (f0 `Mi) "Hello World!"

data List :: * ~> * where
  Ni :: List a
  Co :: a -> List a -> List a
 deriving List(li)

i2 = {`Ni=Ni,`Co=Co}is
f2 = Ctor (`List, 1f)f i2

-- this allows us to construct homogenous lists
t2good :: List Int
t2good = let (co, ni) = (constr (f2 `Co), constr (f2 `Ni)) in co 25 $ co 42 ni


##test "do not allow heterogenous lists"
 t2bad :: List Int
 t2bad = constr t2 `Co 's' $ constr t2 `Co 42 (constr t2 `Ni)

data Equal' :: * ~> * ~> * where
  Eq' :: Equal' a a
 deriving Unit(eq)

i3 = {`Eq=()eq}is
f3 = Ctor (Equate (`Equal, 2f)f) i3
t3 = constr (f3 `Eq)

i4 = {`Hide=Hide}is
f4 = Ctor (`Exo, 0f)f i4
t4 = constr (f4 `Hide) 42

