import "LangPrelude.prg"

-- values, they are used for building verbose contexts

data Tags :: *1 where
  One :: Tag ~> Tags
  More :: Tags ~> Tags ~> Tags
 deriving syntax(tags) Pair(More)

data Labels :: Tags ~> * where
  One :: Label t -> Labels (One t)
  More :: Labels ts -> Labels ts' -> Labels (ts, ts')tags
 deriving syntax(ls) Pair(More)

data Value :: * where
  Ref :: Label n -> Value
  Sole :: Value
  App :: Value -> Value -> Value
  Typed :: Value -> Value -> Value
 deriving syntax(va) LeftList(Sole, App) Pair(Typed)

data Raw :: Tag ~> * ~> * ~> * where
  Def :: Value -> Raw t Value Value
  Annotated :: Value -> Value -> Raw t Value Value
 deriving syntax(ra) Pair(Annotated)

-- well-formedness: check that names are always defined at the point of reference

data WellFormed :: Tag ~> Sofar Tag ~> Sofar Tag ~> * where
  DefFormed :: Raw n Value Value -> NamesSofar [r; n]sf -> WellFormed n r [r; n]sf

data Sofar :: *1 ~> *1 where
  No :: Sofar t
  Join :: Sofar t ~> t ~> Sofar t
 deriving LeftList(sf)


data NamesSofar :: Sofar Tag ~> * where
  NoNames :: NamesSofar []sf
  NamesSofar :: NamesSofar sf -> Label t -> NamesSofar [sf; t]sf
 deriving LeftList(nsf)

data Includes :: Sofar Tag ~> Tags ~> * where
  Roo :: Equal f t -> Includes [r; f]sf (One t)
  Ind :: Includes r (One t) -> Includes [r; f]sf (One t)
  Also :: Includes r ts -> Includes r ts' -> Includes r (ts, ts')tags
 deriving syntax(i) Tick(Ind) Pair(Also)

-- does t appear in bf?
checkInside :: Label t -> NamesSofar bf -> Maybe (Includes bf (One t))
checkInside _ []nsf = Nothing
checkInside l [r; l']nsf = case sameLabel l l' of
                           L Eq -> Just (Roo Eq)
                           _ -> case checkInside l r of
                                      Just ev -> Just (ev`1)i
                                      Nothing -> Nothing

-- are all free vars bound in bf?
verifyFree :: NamesSofar bf -> Value -> exists ts . Maybe (Labels ts, Includes bf ts)
verifyFree bf (Ref l) = case checkInside l bf of
                        Nothing -> Ex Nothing
                        Just ev -> Ex (Just (One l, ev))
verifyFree bf []va = Ex Nothing
verifyFree bf [a]va = verifyFree bf a
verifyFree bf [f; a]va = case (verifyFree bf f, verifyFree bf a) of
                         (Ex (Just (ls, ev)), Ex (Just (ls', ev'))) -> Ex (Just ((ls, ls')ls, (ev, ev')i))
                         _ -> Ex Nothing
verifyFree bf (cat, v)va = verifyFree bf v

checkWellformedness :: NamesSofar bf
                    -> VerboseContext Raw Value Value
                    -> Maybe (VerboseContext WellFormed bf sf, NamesSofar sf)
checkWellformedness bf {}ve = Just $ cast ({}ve, bf)
                                where cast :: (VerboseContext WellFormed bf bf, NamesSofar bf)
                                           -> (VerboseContext WellFormed bf sf, NamesSofar sf)
                                      cast = unsafeCast
checkWellformedness bf {l=(_, v)ra; r}ve = case (verifyFree bf v, checkWellformedness new r) of
                                             (Ex (Just (ls, ev)), Just (follows, newest))
                                               -> Just ({l=DefFormed (Def v) new; follows}ve, newest)
                                             _ -> Nothing
                                           where new = [bf; l]nsf


data WellLevelled :: Nat ~> * where
  At :: Nat' l -> WellLevelled l

-- representation of contexts with names
data VerboseContext :: (Tag ~> a ~> a ~> *) ~> a ~> a ~> * where
  E :: VerboseContext k a a
  Q :: Label n -> k n a b -> VerboseContext k b c -> VerboseContext k a c
 deriving syntax(ve) Record(E, Q)

-- Examples of VerboseContext


-- h :: (Foo :: * ~> *) Int
h_is_Int = { `Int=(Ref `Type, Ref `Star)ra
           , `h=([]va, [(Ref `Foo, [Ref `Karr, Ref `Star, Ref `Star]va)va, Ref `Int]va)ra
           }ve

Just (well_h_is_Int, defs_h_is_Int@[`Int, `h]nsf) = checkWellformedness [`Star, `Karr]nsf h_is_Int
