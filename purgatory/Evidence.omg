-- values, they are used for building verbose contexts

data Value :: * where
  Ref :: Label n -> Value
  Sole :: Value
  App :: Value -> Value -> Value
  Typed :: Value -> Value -> Value
 deriving syntax(va) LeftList(Sole, App) Pair(Typed)

data Raw :: * ~> * ~> * where
  Def :: Value -> Raw Value Value
  Annotated :: Value -> Value -> Raw Value Value
 deriving syntax(ra) Pair(Annotated)

-- well-formedness: check that names are always defined at the point of reference

data WellFormed :: * ~> * ~> * where
  DefFormed :: Raw Value Value -> WellFormed (Raw Value Value) (Raw Value Value)

--wf :: Row Tag Raw ~> Row Tag WellFormed
--{wf {}r} = {}r

checkWellformedness :: VerboseContext Raw Value Value -> VerboseContext WellFormed (Raw Value Value) (Raw Value Value)
checkWellformedness {}ve = {}ve
checkWellformedness {l=(d@(Def v)); r}ve = {l=DefFormed d; checkWellformedness r}ve
checkWellformedness {l=(_, v)ra; r}ve = {l=DefFormed (Def v); checkWellformedness r}ve

data WellLevelled :: Nat ~> * where
  At :: Nat' l -> WellLevelled l

-- representation of contexts with names
data VerboseContext :: (* ~> * ~> *) ~> * ~> * ~> * where
  E :: VerboseContext k a a
  Q :: Label n -> k a b -> VerboseContext k b c -> VerboseContext k a c
 deriving syntax(ve) Record(E, Q)

-- Examples of VerboseContext


-- h :: (Foo :: * ~> *) Int
h_is_Int = { `Int=(Ref `Type, Ref `Star)ra
           , `h=([]va, [(Ref `Foo, [Ref `Karr, Ref `Star, Ref `Star]va)va, Ref `Int]va)ra
           }ve


