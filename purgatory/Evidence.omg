import "LangPrelude.prg"

-- values, they are used for building verbose contexts

data Value :: * where
  Ref :: Label n -> Value
  Sole :: Value
  App :: Value -> Value -> Value
  Typed :: Value -> Value -> Value
 deriving syntax(va) LeftList(Sole, App) Pair(Typed)

data Raw :: * ~> * ~> * where
  Def :: Value -> Raw Value Value
  Annotated :: Value -> Value -> Raw Value Value
 deriving syntax(ra) Pair(Annotated)

-- well-formedness: check that names are always defined at the point of reference

data WellFormed :: * ~> * ~> * where
  DefFormed :: Raw Value Value -> NamesSofar [r; n]sf -> WellFormed (NamesSofar r) (NamesSofar [r; n]sf)

data Sofar :: *1 ~> *1 where
  No :: Sofar t
  Join :: Sofar t ~> t ~> Sofar t
 deriving LeftList(sf)


data NamesSofar :: Sofar Tag ~> * where
  NoNames :: NamesSofar []sf
  NamesSofar :: NamesSofar sf -> Label t -> NamesSofar [sf; t]sf
 deriving LeftList(nsf)

{-
checkWellformedness :: NamesSofar bf -> VerboseContext Raw Value Value -> exists sf . VerboseContext WellFormed (NamesSofar bf) (NamesSofar sf)
checkWellformedness bf {}ve = Ex {}ve
--checkWellformedness bf {l=(d@(Def v)); r}ve = Ex {l=DefFormed d [bf; l]nsf; checkWellformedness r}ve
checkWellformedness bf {l=(_, v)ra; r}ve = Ex {l=DefFormed (Def v) new; follows}ve
                                             where new = [bf; l]nsf
                                                   f (Ex follows) = checkWellformedness new r
-}

checkWellformedness :: NamesSofar bf -> VerboseContext Raw Value Value -> exists sf . (VerboseContext WellFormed (NamesSofar bf) (NamesSofar sf), NamesSofar sf)
checkWellformedness bf {}ve = Ex ({}ve, bf)
checkWellformedness bf {l=(_, v)ra; r}ve = Ex ({l=DefFormed (Def v) new; follows}ve, new)
                                             where new = [bf; l]nsf
                                                   more :: (NamesSofar bf, exists sf . (VerboseContext WellFormed (NamesSofar bf) (NamesSofar sf), NamesSofar sf))
                                                   more = (new, checkWellformedness new r)



data WellLevelled :: Nat ~> * where
  At :: Nat' l -> WellLevelled l

-- representation of contexts with names
data VerboseContext :: (* ~> * ~> *) ~> * ~> * ~> * where
  E :: VerboseContext k a a
  Q :: Label n -> k a b -> VerboseContext k b c -> VerboseContext k a c
 deriving syntax(ve) Record(E, Q)

-- Examples of VerboseContext


-- h :: (Foo :: * ~> *) Int
h_is_Int = { `Int=(Ref `Type, Ref `Star)ra
           , `h=([]va, [(Ref `Foo, [Ref `Karr, Ref `Star, Ref `Star]va)va, Ref `Int]va)ra
           }ve


