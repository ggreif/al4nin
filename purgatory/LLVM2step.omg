import "LangPrelude.prg"

-- for now this is untyped,
-- I just want to demonstrate the 2-step
-- approach

kind Term = Terminator | Regular
kind Init = InitBlock | SuccBlock

kind Origin = Const | Defined Tag

data Use :: Origin ~> * where
   Const :: Int -> Use Const
   Use :: Label t -> Use (Defined t)

---------------
-- primitives
-- these can be parsed from a text file for example
--
data Prim :: Term ~> Init ~> Uses ~> * where
  Add :: Use cn -> Use cn' -> Prim Regular b {trackUses2 cn cn' []u}
  Ret :: Use cn -> Prim Terminator b {trackUses2 cn Const []u}

kind Lab = Named Tag | Anon

data Ref :: Lab ~> * where
  Tag :: Label t -> Ref (Named t)
  Anon :: Ref Anon

data Block :: Row Lab Term ~> * where
  Fin :: Block {}r
  BCons :: Ref l -> Prim t i u -> Block r -> Block {l=t; r}r
 deriving Record(b)

test1 = {Anon=Ret $ Const 5}b
test2 = {Tag `a=Add (Const 40) (Const 2), Anon=Ret $ Use `a}b

---------------
-- instructions
-- these actually track the defs and uses in the type system

-- uses
-- since we are untyped for now
-- we have a list of them
data Uses :: *1 where
  NoUses :: Uses
  AddUse :: Tag ~> Uses ~> Uses
 deriving List(u)

trackUses2 :: Origin ~> Origin ~> Uses ~> Uses 
{trackUses2 Const Const us} = us
{trackUses2 Const (Defined t) us} = [t; us]u
{trackUses2 (Defined t) Const us} = [t; us]u
{trackUses2 (Defined t) (Defined t') us} = [t, t'; us]u



-- defs
-- since we are	untyped	for now
-- we have a list of them
data Defs :: *1 where
  NoDefs :: Defs
  AddDef :: Tag ~> Defs ~> Defs
 deriving List(d)

data Props :: *1 where
  A :: Defs ~> Uses ~> Props

data Instr :: Props ~> Props ~> * where
  Def :: Label t -> Prim Regular i us -> Instr (A d u) (A [t; d]d us)
  Exec :: Prim Regular i us -> Instr (A d u) (A d u)
  Term :: Prim Terminator i us -> Instr (A d u) (A d u)

test3 = Term $ Ret (Const 42)
test4 = Def `a $ Add (Const 40) (Const 2)
test5 = Def `a $ Add (Const 40) (Use `b)