import "LangPrelude.prg"

-- for now this is untyped,
-- I just want to demonstrate the 2-step
-- approach

kind Term = Terminator | Regular
kind Init = InitBlock | SuccBlock

kind Origin = Const | Defined

data Use :: Origin ~> * where
   Const :: Int -> Use Const
   Use :: Label t -> Use Defined

data Prim :: Term ~> Init ~> * where
  Add :: Use cn -> Use cn' -> Prim Regular b
  Ret :: Use cn -> Prim Terminator b

kind Lab = Named Tag | Anon

data Ref :: Lab ~> * where
  Tag :: Label t -> Ref (Named t)
  Anon :: Ref Anon

data Block :: Row Lab Term ~> * where
  Fin :: Block {}r
  BCons :: Ref l -> Prim t i -> Block r -> Block {l=t; r}r
 deriving Record(b)

test1 = {Anon=Ret $ Const 5}b
test2 = {Tag `a=Add (Const 40) (Const 2), Anon=Ret $ Use `a}b

---------------
-- instructions
-- these actually track the defs and uses in the type system

data Props :: *1 where
  A :: Props

data Instr :: Props ~> Props ~> * where
  Def :: Label t -> Prim Regular i -> Instr A A
  Exec :: Prim Regular i -> Instr A A
  Term :: Prim Terminator i -> Instr A A

test3 = Term $ Ret (Const 42)
test4 = Def `a $ Add (Const 40) (Const 2)
