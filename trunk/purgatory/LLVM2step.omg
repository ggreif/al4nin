import "LangPrelude.prg"

-- for now this is untyped,
-- I just want to demonstrate the 2-step
-- approach

kind Term = Terminator | Regular
kind Init = EntryBlock | SuccBlock
kind Scope = Universe | Mod | Func

kind Origin :: Scope ~> *1 where
  Const :: Origin Universe
  Linkable :: Tag ~> Tag ~> Origin Mod
  Defined :: Tag ~> Tag ~> Tag ~> Origin Func

data Use :: Origin s ~> * where
  Const :: Int -> Use Const
  Use :: Label m -> Label f -> Label t -> Use (Defined m f t)
  Global :: Label mod -> Label t -> Use (Linkable mod t)

-- for now simplify it
use = Use `module `id

---------------
-- primitives
-- these can be parsed from a text file for example
--
data Prim :: Term ~> Init ~> Uses ~> * where
  Phi :: UseEvidence us -> Prim Regular SuccBlock us
  Add :: Use cn -> Use cn' -> Prim Regular b {trackUses2 cn cn' []u}
  Call :: Label l -> UseEvidence us -> Prim Regular b us
  Ret :: Use cn -> Prim Terminator b {trackUses1 cn []u}
  Branch :: Label l -> Prim Terminator b []u

kind Lab = Named Tag | Anon

data Ref :: Lab ~> * where
  Tag :: Label t -> Ref (Named t)
  Anon :: Ref Anon

data Block :: Row Lab Term ~> * where
  Fin :: Block {}r
  BCons :: Ref l -> Prim t i u -> Block r -> Block {l=t; r}r
 deriving Record(b)

test1 = {Anon=Ret $ Const 5}b
test2 = {Tag `a=Add (Const 40) (Const 2), Anon=Ret $ use `a}b

---------------
-- instructions
-- these actually track the defs and uses in the type system

-- uses
-- since we are untyped for now
-- we have a list of them
data Uses :: *1 where
  NoUses :: Uses
  AddUse :: Tag ~> Uses ~> Uses
 deriving List(u)

trackUses1 :: Origin s ~> Uses ~> Uses
{trackUses1 Const us} = us
{trackUses1 (Defined m f t) us} = [t; us]u

trackUses2 :: Origin s ~> Origin u ~> Uses ~> Uses 
{trackUses2 Const Const us} = us
{trackUses2 Const (Defined m f t) us} = [t; us]u
{trackUses2 (Defined m f t) Const us} = [t; us]u
{trackUses2 (Defined m f t) (Defined m' f' t') us} = [t, t'; us]u

appendUses :: Uses ~> Uses ~> Uses
{appendUses []u us} = us
{appendUses [t; r]u us} = [t; {appendUses r us}]u


-- defs
-- since we are	untyped	for now
-- we have a list of them
data Defs :: *1 where
  NoDefs :: Defs
  AddDef :: Tag ~> Defs ~> Defs
 deriving List(d)

prop FreeDef :: Tag ~> Defs ~> * where
  Trivially :: FreeDef t []d
  More :: DiffLabel t t' -> FreeDef t r -> FreeDef t [t'; r]d
 deriving List(f)

data Props :: *1 where
  A :: Defs ~> Uses ~> Term ~> Props

-- exec should only apply when the return type of the primitive is void!
data Instr :: Props ~> Props ~> * where
  Def :: FreeDef t d => Label t -> Prim Regular i us -> Instr (A d {appendUses us u} Regular) (A [t; d]d u Regular)
  Exec :: Prim Regular i us -> Instr (A d {appendUses us u} Regular) (A d u Regular)
  Term :: Prim Terminator i us -> Instr (A d {appendUses us u} Regular) (A d u Terminator)

test3 = Term $ Ret (Const 42)
test4 = Def `a $ Add (Const 40) (Const 2)
test5 = Def `a $ Add (Const 40) (use `b)
test6 = Def `a $ Add (use `b) (use `c)

data Thrist :: forall (l :: *1) . (l ~> l ~> *)  ~> l ~> l ~> * where
  Nil :: Thrist k a a
  Cons :: k a b -> Thrist k b c -> Thrist k a c
 deriving List(l)


##test "double def not permitted (but see issue 67!)"
  test7 = [Def `a $ Add (Const 40) (Const 2), Def `a $ Add (Const 40) (Const 2)]l


test8 = [test5, test3]l

data UseEvidence :: Uses ~> * where
  NoUses :: UseEvidence []u
  AddUse :: Label l -> UseEvidence r -> UseEvidence [l; r]u
 deriving List(ue)

data DefEvidence :: Defs ~> * where
  NoDefs :: DefEvidence []d
  AddDef :: Label l -> DefEvidence r -> DefEvidence [l; r]d
 deriving List(de)

{-
test9 = undefined
test10 = undefined
test11 = undefined
test12 = undefined
-}

defsOnly :: Row Lab Term ~> Defs
{defsOnly {}r} = []d
{defsOnly {Anon=t; r}r} = {defsOnly r}
{defsOnly {(Named n)=t; r}r} = [n; {defsOnly r}]d

{-
prependUse :: Origin ~> Uses ~> Uses
{prependUse Const r} = r
{prependUse (Defined t) r} = [t; r]u

collectUses' :: Use o -> UseEvidence r -> UseEvidence {prependUse o r}
-}
{-
collectUses' :: Use o -> UseEvidence r -> UseEvidence {prependUse o r}
collectUses' (Const _) ev = ev
collectUses' (Use l) ev = [l; ev]ue
-}

-- THE ABOVE CONSTRUCTION NEEDS LEMMAS prependUse <--> appendUses


collectUses :: Prim b i us -> UseEvidence r -> UseEvidence {appendUses us r}
collectUses (Ret (Const _)) ev =  ev
collectUses (Ret (Use _ _ l)) ev = [l; ev]ue
collectUses (Add (Const _) (Const _)) ev =  ev
collectUses (Add (Const _) (Use _ _ l)) ev = [l; ev]ue
collectUses (Add (Use _ _ l) (Const _)) ev = [l; ev]ue
collectUses (Add (Use _ _  l) (Use _ _  m)) ev = [l, m; ev]ue
collectUses (Phi []ue) ev = ev
collectUses (Phi [l; r]ue) ev = [l; collectUses (Phi r) ev]ue
collectUses (Branch _) ev = ev


-- NO LEMMA YET! collectUses (Ret u) ev = collectUses' u ev

-- Defs should be a snoc-list to get this beautiful
prependDefs :: Defs ~> Defs ~> Defs
{prependDefs []d ds} = ds
{prependDefs [d; r]d ds} = {prependDefs r [d; ds]d}

proveFree :: Label l -> DefEvidence de -> Maybe (FreeDef l de)
proveFree _ []de = Just []f
proveFree l [l'; r]de = case sameLabel l l' of
                        L _ -> Nothing
                        R d -> case proveFree l r of
                               Nothing -> Nothing
                               Just r' -> Just [d; r']f

buildBasicBlock :: DefEvidence ds -> Block r -> exists u . Maybe (DefEvidence {prependDefs {defsOnly r} ds}, Thrist Instr (A ds u Regular) (A {prependDefs {defsOnly r} ds} []u Terminator), UseEvidence u)
buildBasicBlock ds {Anon=(r@Ret _)}b = Ex (Just (ds, [Term r]l, collectUses r []ue))

buildBasicBlock ds {Tag l=(a@Add _ _); r}b = case (buildBasicBlock [l; ds]de r, proveFree l ds) of
                                             (Ex (Just (ds', thr, ue)), Just ev) -> Ex (Just (ds', let proof = ev in [Def l a; thr]l, collectUses a ue))
buildBasicBlock ds {Tag l=(p@Phi _); r}b = case (buildBasicBlock [l; ds]de r, proveFree l ds) of
                                             (Ex (Just (ds', thr, ue)), Just ev) -> Ex (Just (ds', let proof = ev in [Def l p; thr]l, collectUses p ue))
                                             _ -> Ex Nothing

buildBasicBlock _ _ = Ex Nothing


test13 = buildBasicBlock []de {Anon=(Ret (use `a))}b
test14 = buildBasicBlock [`a]de {Tag `b=Add (use `a) (Const 40), Anon=(Ret (use `b))}b
test15 = buildBasicBlock [`a]de {Tag `b=Add (use `a) (Const 40), Tag `c=Add (Const 2) (use `b), Anon=(Ret (use `c))}b
test16 = buildBasicBlock []de {Tag `a=Phi [`n]ue, Anon=Ret $ use `a}b


---------------
-- functions
-- record of named basic blocks and a signature

-- first we do step 1 and establish easily buildable (unchecked) data

data LType a = DontCare

data Arguments :: Row Tag * ~> * where
  Void :: Arguments {}r
  Saturable :: Label l -> LType t -> Arguments r -> Arguments {l=Int; r}r
 deriving Record(a)

kind Target = F Tag (Row Tag *) | B Tag

prop FreeName :: Target ~> Row Target a ~> * where
  TriviallyN :: FreeName (B t) {F l a=b}r
  MoreNames :: DiffLabel t t' -> FreeName (B t) r -> FreeName (B t) {B t'=b; r}r
 deriving List(fn)

data Blocks :: Row Target (Row Lab Term) ~> * where
  Entry :: Label l -> Arguments a -> Block b -> Blocks {F l a=b}r
  Successor :: Label l -> Block b -> Blocks r -> Blocks {B l=b; r}r
 -- deriving Record(bs)

test17 = Entry `fak {`a=DontCare, `b=DontCare}a test2
test18 = Successor `target test1 test17

-- step 2: build the checked variant, by applying evidence to constraints

argumentDefs :: Row Tag * ~> Defs
{argumentDefs {}r} = []d
{argumentDefs {l=a; r}r} = [l; {argumentDefs r}]d

data BasicBlocks :: Row Target (Row Lab Term) ~> * where
  EntryBlock :: Arguments a -> Label l -> Thrist Instr (A {argumentDefs a} u Regular) (A d []u Terminator) -> UseEvidence u -> DefEvidence d -> BasicBlocks {F l a=b}r
  SuccessorBlock :: FreeName (B l) r => Label l -> DefEvidence d -> Thrist Instr (A d u Regular) (A d' []u Terminator) -> UseEvidence u -> DefEvidence d' -> BasicBlocks r -> BasicBlocks {B l=b; r}r

test19 = EntryBlock {`n=DontCare}a `id [Term (Ret (use `n))]l [`n]ue [`n]de
test20 = SuccessorBlock `dead []de [Term (Ret (Const 42))]l []ue []de test19

functionName :: Row Target b ~> Tag
{functionName {F l a=b}r} = l
{functionName {B l=b; r}r} = {functionName r}

argsAsArrow :: * ~> Row Tag * ~> *
{argsAsArrow r {}r} = r
{argsAsArrow r {l=t; more}r} = t -> {argsAsArrow r more}


functionArgs :: Row Target b ~> *
{functionArgs {F l a=b}r} = {argsAsArrow Int a}
{functionArgs {B l=b; r}r} = {functionArgs r}


data Function :: Tag ~> * ~> * where
  Body :: BasicBlocks r -> Function {functionName r} {functionArgs r}
  External :: Arguments a -> Label l -> Function l {argsAsArrow Int a}

test21 = Body test20

---------------
-- Modules
-- record of named globals (e.g. functions)

data Global :: Tag ~> * ~> * where
  Fun :: Function l t -> Global l t
  Var :: Label l -> Global l t
  Alias :: Label l -> Global l t


