import "LangPrelude.prg"

-- SEE ALSO: HenkTest.omg
data B :: *1 where
  St :: Nat ~> B
  Bi :: B ~> B

data Star :: B ~> * where
  Star0 :: Star (St Z)
  Star :: Star (St n) -> Star (St (1 + n)t)
 deriving Nat(s)

star :: Nat' n -> Star (St n)
star Z = Star0
star (1 + n)v = Star (star n)

data Thing :: Nat ~> * where
  Spine :: Star (St n) -> Thing (2 + n)t
  Pi :: Thing (S n) -> Thing (S n) -> Thing (S n)
  Lam :: Thing (S (S n)) -> Thing (S (S n)) -> Thing (S n)
  Int :: Thing 1t
  Val :: Int -> Thing Z
  -- Binder :: Nat' d -> Thing (d + n) -> Thing (d + n) -> Thing n

tau :: Thing n -> Thing (S n)
tau (Spine s) = Spine (Star s)
tau (Lam x y) = (Pi x y)
tau (Pi _ y) = tau y
tau Int = Spine Star0
tau (Val _) = Int

-- data Type :: 

-- Pi is a 1-binder, i.e. the distance
-- between the levels of ingress and egress is 1:
-- P_:Int>Int  (this is normally written Int->Int:*)
-- Lam is a 2-binder.
-- tau takes an (n+1)-binder to an n-binder
--           a 0-binder to a 0-binder

