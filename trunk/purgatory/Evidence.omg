-- values, they are used for building verbose contexts

data Value :: * where
  Ref :: Label n -> Value
  Sole :: Value
  App :: Value -> Value -> Value
  Typed :: Value -> Value -> Value
 deriving syntax(va) LeftList(Sole, App) Pair(Typed)

data Raw :: * ~> * where
  Def :: Value -> Raw Value
  Annotated :: Value -> Value -> Raw (Value, Value)
 deriving syntax(ra) Pair(Annotated)

data LevelsInferred :: Nat ~> * where
  At :: Nat' l -> LevelsInferred l

-- representation of contexts with names
data VerboseContext :: Row Tag (h ~> *) ~> * where
  E :: VerboseContext {}r
  Q :: Label n -> k a -> VerboseContext r -> VerboseContext {n=k;r}r
 deriving syntax(ve) Record(E, Q)

-- Examples of VerboseContext


-- h :: (Foo :: * ~> *) Int
h_is_Int = { `Int=(Ref `Type, Ref `Star)ra
           , `h=([]va, [(Ref `Foo, [Ref `Karr, Ref `Star, Ref `Star]va)va, Ref `Int]va)ra
           }ve


