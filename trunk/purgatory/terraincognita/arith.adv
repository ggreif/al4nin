{ comments are enclosed by curly-braces;
  no nested comments are allowed  }

{ addition 

  these rules work when the arguments are numerals
  but not for all arbitrary expressions

}

Add Z y => y;
Add (S x) y => S (Add x y);
Add x (S y) => S (Add x y);
Add x Z => x;
Add (Add Z y1) (Add Z y2) => Add y1 y2;
Add (Add (S x1) y1) (Add (S x2) y2) => S (S (Add (Add x1 y1) (Add x2 y2)));
Add (Mult Z y1) (Mult Z y2) => Z;
Add (Mult (S x1) y1) (Mult (S x2) y2) => Add (Add y1 y2) (Add (Mult x1 y1) (Mult x2 y2));
Add (Mult (S x1) y1) (Add (S x2) y2) => S (Add (Add y1 (Mult x1 y1)) (Add x2 y2));
Add (Mult Z y1) (Add (S x2) y2) => S (Add x2 y2);
Add (Add (Add (S x) y) z) w => S (Add (Add (Add x y) z) w);
Add (Add (Add Z y) z) w => Add (Add y z) w;

{ define multiplication (Mult) here }

Mult Z y => Z;
Mult (S x) y => Add y (Mult x y);
Mult x Z => Z;
Mult x (S y) => Add x (Mult x y);
Mult (Mult Z y1) (Mult Z y2) => Z;
Mult (Mult (S x1) y1) (Mult (S x2) y2) => Mult (Add y1 (Mult x1 y1)) (Add y2 (Mult x2 y2));
Mult (Add Z y1) (Add Z y2) => Mult y1 y2;
Mult (Add (S x1) y1) (Add (S x2) y2)
{ => S (Add x2 (Add y2 (Add x1 (Add (Mult x1 x2) (Add (Mult x1 y2) (Add y1 (Add (Mult y1 x2) (Add (Mult y1 y2))))))))); }
{ => S (Add x2 (Add y2 (Add x1 (Add y1 (Add (Mult x1 x2) (Add (Mult x1 y2) (Add (Mult y1 x2) (Mult y1 y2)))))))); }
{ gut => S (Add (Add (Add x2 y2) (Add x1 y1)) (Add (Add (Mult x1 x2) (Mult x1 y2)) (Add (Mult y1 x2) (Mult y1 y2)))); }
=> S (Add (Add (Add x2 y2) (Add x1 y1)) (Add (Mult x1 (Add x2 y2)) (Mult y1 (Add x2 y2))));

{
(1 + x1 + y1) * (1 + x2 + y2)
= 1 + x2 + y2
+ x1 + x1x2 + x1y2
+ y1 + y1x2 + y1y2
}

{ when all other computation is done } 

Compute x => x;

. { end of rules }

{ DOWNLOAD: /bin/umodem arith.adv STO }
{ USAGE: advise run arith.adv arith.tests }
{ TESTING: advise step arith.adv arith.tests }

{ tests for testing }

{ Compute (Add (Add (S (S Z)) (S Z)) Z) -> (S (S (S Z))); . }
{ Compute (Add (Add (S (S Z)) (S Z)) (Add Z Z)) -> (S (S (S Z))); . }