import "LangPrelude.prg"


prop LE :: Nat ~> Nat ~> *0 where
  Base:: LE Z a
  Step:: LE a b -> LE (S a) (S b)

data LE':: Nat ~> Nat ~> *0 where
  LE:: LE x y => LE' x y  

plus :: Nat ~> Nat ~> Nat
{plus Z x} = x
{plus (S y) x} = S {plus y x}


data Climber :: *1 where
  Spine :: Nat ~> Climber
  Binder :: Nat ~> Nat ~> Climber


{- climbing rules
.
.
^       up
^       up
*       Spine' (start)
|\      LV
| \     SE
|  \    SE
|   \   SE
|    \  SE
|     + SE (target)
|
+-------------

-}

prop Climber' :: Climber ~> *0 where
  Spine' :: Nat' (S st) -> Climber' (Spine (S st))
  -- We can go southeast, even hitting the ground
  SE :: Climber' (Binder (S b) (S st)) -> Climber' (Binder (S (S b)) st)
  -- We can leave the spine
  LV :: Climber' (Spine (S st)) -> Climber' (Binder 1t st)


diff :: Nat ~> Nat ~> Nat
{diff a Z} = a
{diff (S a) (S b)} = {diff a b}

-- determine the binding discipline
discipline :: Nat ~> Climber ~> Climber
--{discipline a (Spine b)} = Binder (S {diff a b}) b
--{discipline a (Binder (S Z) Z)} = Binder (S a) Z
{discipline a b} = Binder (S {diff a {strat b}}) {strat b}

-- strat: get the stratum
strat :: Climber ~> Nat
{strat (Spine b)} = b
{strat (Binder a b)} = b

data Henk :: Climber ~> * where
  Lit :: Climber' (Spine st) -> Henk (Spine st)
  Bind :: LE {strat b} a => Climber' {discipline a b} -> Henk (Spine a) -> Henk b -> Henk {discipline a b}
  Value :: Henk (Binder 1t 0t)

five :: Henk (Binder 1t 0t)
five = Value

int :: Henk (Spine 1t)
int = Lit (Spine' 1v)

constfive :: Henk (Binder 2t 0t)
constfive = Bind (SE $ LV $ Spine' 2v) int five

tau_constfive = Bind (LV $ Spine' 2v) int int

